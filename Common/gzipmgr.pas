unit gzipmgr;

interface

uses
  Windows, SysUtils;

type
  EGZipGeneric = class(Exception);
  EGZipEngineMissing = class(EGZipGeneric);
  EGZipBatchFileWriting = class(EGZipGeneric);

function GZipDecompress(const SourceFile: TFileName; OutputDir: TFileName): Boolean;
function GZipInitEngine(WorkDirectory: TFileName): Boolean;

//==============================================================================
implementation
//==============================================================================

uses
  Classes, SysTools;

const
  SEVENZIP_SUCCESS_STRING = 'Everything is Ok';
  
var
  GZipExec: TFileName;

//==============================================================================

function GZipDecompress(const SourceFile: TFileName; OutputDir: TFileName): Boolean;
var
{$IFDEF DEBUG}
  SevenZipDebugOutput: string;
{$ENDIF}
  BatchCommandLine: string;
  StrIndex: Integer;
  FBatchFile: TextFile;
  BatchFileName,
  ResultOutFile: TFileName;
  ResultSL: TStringList;
  
begin
  if not FileExists(GZipExec) then
    raise EGZipEngineMissing.Create('GZipDecompress [GZipMgr]: Engine doesn''t exists. Please call GZipInitEngine() first.');

  if not DirectoryExists(OutputDir) then
    ForceDirectories(OutputDir);

  // Delete the last "\" for the OutputDir
  if Copy(OutputDir, Length(OutputDir), 1) = '\' then
    OutputDir := Copy(OutputDir, 1, Length(OutputDir) - 1);
    
  // Create the batch
  try
    BatchFileName := IncludeTrailingPathDelimiter(OutputDir)
      + ExtractFileName(ChangeFileExt(SourceFile, '.bat'));
    ResultOutFile := ChangeFileExt(BatchFileName, '.out');

    // Writing the batch onto disk
    AssignFile(FBatchFile, BatchFileName);
    ReWrite(FBatchFile);

    WriteLn(FBatchFile,
      '@echo off', sLineBreak,
      'rem Generated by GZipMgr Unit by [big_fury]SiZiOUS', sLineBreak,
      '"', GZipExec, '" x "', SourceFile, '" "', OutputDir, '" > "',
        ResultOutFile, '"', sLineBreak,
      ':del_batch', sLineBreak,
      'del "', BatchFileName, '"', sLineBreak,
      'if exist "', BatchFileName, '" goto del_batch'
    );
    
    CloseFile(FBatchFile);
  except
    on E:Exception do
      raise EGZipBatchFileWriting.Create('SevenZipExtract [LZMADec]: Error '
        + 'when creating process Batch File.');
  end;

  // Running the batch file...
  BatchCommandLine := '"' + BatchFileName + '" > nul 2> nul';
  Result := RunAndWait(BatchCommandLine);

  // Parsing output
  if Result and FileExists(ResultOutFile) then begin
    ResultSL := TStringList.Create;
    try
      ResultSL.LoadFromFile(ResultOutFile);
      DeleteFile(ResultOutFile);
{$IFDEF DEBUG}
      SevenZipDebugOutput := ResultSL.Text;
{$ENDIF}
      StrIndex := ResultSL.IndexOf(SEVENZIP_SUCCESS_STRING);
      Result := StrIndex <> -1;      
    finally
      ResultSL.Free;
    end;
  end;

{$IFDEF DEBUG}
  WriteLn(SevenZipDebugOutput);
  WriteLn('RunAndWait Result on 7zDec: ', Result);
{$ENDIF}
end;

//------------------------------------------------------------------------------

function GZipInitEngine(WorkDirectory: TFileName): Boolean;
begin
  GZipExec := IncludeTrailingPathDelimiter(WorkDirectory) + 'gzip.exe';
  Result := ExtractFile('GZIP', GZipExec);
end;

//------------------------------------------------------------------------------

function GZipClearEngine: Boolean;
begin
  Result := False;
  if FileExists(GZipExec) then
    Result := DeleteFile(GZipExec);
end;

//==============================================================================

initialization

//------------------------------------------------------------------------------

finalization
  GZipClearEngine;

//==============================================================================

end.
