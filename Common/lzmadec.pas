(* This is a simple LZMA decoder wrapper.
This is using an embedded 7zDec binary, you can find the source of this
in the /addons/ directory. *)
unit LZMADec;

interface

uses
  Windows, SysUtils;

type
  ESevenZipGeneric = class(Exception);
  ESevenZipEngineMissing = class(ESevenZipGeneric);
  ESevenZipBatchFileWriting = class(ESevenZipGeneric);

function SevenZipExtract(SourceFile: TFileName; OutputDir: TFileName): Boolean;
function SevenZipInitEngine(WorkDirectory: TFileName): Boolean;

//==============================================================================
implementation
//==============================================================================

uses
  Classes, SysTools;

const
  SEVENZIP_SUCCESS_STRING = 'Everything is Ok';
  
var
  SevenZipDecExec: TFileName;

//==============================================================================

function SevenZipExtract(SourceFile: TFileName; OutputDir: TFileName): Boolean;
var
{$IFDEF DEBUG}
  SevenZipDebugOutput: string;
{$ENDIF}
  BatchCommandLine: string;
  StrIndex: Integer;
  FBatchFile: TextFile;
  BatchFileName,
  ResultOutFile: TFileName;
  ResultSL: TStringList;

  // Thanks IlDucci for this bug submission
  S, OemString: string;

begin
  if not FileExists(SevenZipDecExec) then
    raise ESevenZipEngineMissing.Create('SevenZipExtract [LZMADec]: Engine '
      + 'doesn''t exists. Please call SevenZipInitEngine() first.');

  SourceFile := ExpandFileName(SourceFile);
  OutputDir := ExpandFileName(OutputDir);  
  if not DirectoryExists(OutputDir) then
    ForceDirectories(OutputDir);

  // Delete the last "\" for the OutputDir
  if Copy(OutputDir, Length(OutputDir), 1) = '\' then
    OutputDir := Copy(OutputDir, 1, Length(OutputDir) - 1);
    
  // Create the batch
  try
    BatchFileName := IncludeTrailingPathDelimiter(OutputDir)
      + ExtractFileName(ChangeFileExt(SourceFile, '.bat'));
    ResultOutFile := ChangeFileExt(BatchFileName, '.out');

    // Writing the batch onto disk
    AssignFile(FBatchFile, BatchFileName);
    ReWrite(FBatchFile);

    S :=
      '@echo off' + sLineBreak +
      'rem Generated by LZMADEC Unit by [big_fury]SiZiOUS' + sLineBreak +
      '"' + SevenZipDecExec + '" x "' + SourceFile + '" "' + OutputDir + '" > "' +
        ResultOutFile + '"' + sLineBreak +
      ':del_batch' + sLineBreak +
      'del "' + BatchFileName + '"' + sLineBreak +
      'if exist "' + BatchFileName + '" goto del_batch';
    SetLength(OemString, Length(S));
    CharToOem(PChar(S), PChar(OemString));
    WriteLn(FBatchFile, OemString);

    CloseFile(FBatchFile);
  except
    on E:Exception do
      raise ESevenZipBatchFileWriting.Create('SevenZipExtract [LZMADec]: Error '
        + 'when creating process Batch File.');
  end;

  // Running the batch file...
  BatchCommandLine := '"' + BatchFileName + '" > nul 2> nul';
  Result := RunAndWait(BatchCommandLine);

  // Parsing output
  if Result and FileExists(ResultOutFile) then begin
    ResultSL := TStringList.Create;
    try
      ResultSL.LoadFromFile(ResultOutFile);
      DeleteFile(ResultOutFile);
{$IFDEF DEBUG}
      SevenZipDebugOutput := ResultSL.Text;
{$ENDIF}
      StrIndex := ResultSL.IndexOf(SEVENZIP_SUCCESS_STRING);
      Result := StrIndex <> -1;      
    finally
      ResultSL.Free;
    end;
  end;

{$IFDEF DEBUG}
  WriteLn(SevenZipDebugOutput);
  WriteLn('RunAndWait Result on 7zDec: ', Result);
{$ENDIF}
end;

//------------------------------------------------------------------------------

function SevenZipInitEngine(WorkDirectory: TFileName): Boolean;
begin
  SevenZipDecExec := IncludeTrailingPathDelimiter(WorkDirectory) + '7zDec.exe';
  Result := ExtractFile('LZMA', SevenZipDecExec);
end;

//------------------------------------------------------------------------------

function SevenZipClearEngine: Boolean;
begin
  Result := False;
  if FileExists(SevenZipDecExec) then
    Result := DeleteFile(SevenZipDecExec);
end;

//==============================================================================

initialization

//------------------------------------------------------------------------------

finalization
  SevenZipClearEngine;

//==============================================================================

end.
